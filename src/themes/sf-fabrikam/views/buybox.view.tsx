/*--------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * See License.txt in the project root for license information.
 *--------------------------------------------------------------*/

/* eslint-disable no-duplicate-imports */
import {
    IBuyboxAddToCartViewProps,
    IBuyboxAddToOrderTemplateViewProps,
    IBuyboxAddToWishlistViewProps,
    IBuyboxCallbacks,
    IBuyboxData,
    IBuyboxFindInStoreViewProps,
    IBuyboxKeyInPriceViewProps,
    IBuyboxProductConfigureDropdownViewProps,
    IBuyboxProductConfigureViewProps,
    IBuyboxProductQuantityViewProps,
    IBuyboxProps,
    IBuyboxShopSimilarLookViewProps,
    IBuyboxState,
    IBuyboxViewProps
} from '@msdyn365-commerce-modules/buybox';
import { IncrementalQuantity, ITelemetryContent, Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
import Popup from 'reactjs-popup';

import {
    IBuyboxProps as IBuyboxExtentionProps,
    IBuyboxResources as IBuyboxExtentionResources
} from '../definition-extensions/buybox.ext.props.autogenerated';
import { default as IndiaPincode } from '../sf-data/india-pincode.json';

export interface IIndiaPincode {
    p: number;
    s: string;
}

export interface IIndiaPincodeObject {
    pincode: IIndiaPincode[];
}

export interface IProductStock {
    inventoryLabel: {
        type: string;
        key: null;
        ref: null;
        props: {
            className: string;
            children: {
                type: string;
                key: null;
                ref: null;
                props: {
                    className: string;
                    children: string;
                };
                _owner: null;
            };
        };
        _owner: null;
    };
}

const BuyboxView: React.FC<IBuyboxViewProps & IBuyboxExtentionProps<IBuyboxData>> = props => {
    const {
        ModuleProps,
        MediaGalleryContainerProps,
        ProductInfoContainerProps,
        addToCart,
        addToOrderTemplate,
        addToWishlist,
        telemetryContent,
        configure,
        description,
        findInStore,
        quantity,
        price,
        title,
        rating,
        callbacks,
        state,
        resources,
        inventoryLabel,
        shopSimilarLook,
        keyInPrice,
        quantityLimitsMessages,
        max,
        shopSimilarDescription,
        unitOfMeasure,
        data: { product }
    } = props;

    /* Context Variables */
    const cRetailURL = props.context.request.apiSettings.baseUrl;
    const cRetailOUN = props.context.request.apiSettings.oun ? props.context.request.apiSettings.oun : '';
    const cCustomerAccount = props.context.request.user.customerAccountNumber
        ? props.context.request.user.customerAccountNumber
        : 'EC00001';
    const cCustomerEmailAddress = props.context.request.user.emailAddress ? props.context.request.user.emailAddress : '';
    const cCustomerZipCode = props.context.request.cookies.get('_msdyn365___zipcode_')?.value
        ? props.context.request.cookies.get('_msdyn365___zipcode_')?.value
        : '';
    const cCustomerAvailabilityCheck = props.context.request.cookies.get('_msdyn365___zipcode_check')?.value
        ? props.context.request.cookies.get('_msdyn365___zipcode_check')?.value
        : 'true';
    const cCustomerResponseStatus = props.context.request.cookies.get('_msdyn365___zipcode_res_status')?.value
        ? props.context.request.cookies.get('_msdyn365___zipcode_res_status')?.value
        : '';

    /* Notify Me*/
    const [open, setOpen] = React.useState(false);
    const closeModal = () => setOpen(false);
    const [email, setEmail] = React.useState<string>(cCustomerEmailAddress);
    const [validEmail, setValidEmail] = React.useState<string>('');
    const [validPhone, setValidPhone] = React.useState<string>('');
    const [phone_no, setPhoneNo] = React.useState<string>('');
    const [statusMessage, setStatusMessage] = React.useState<string>('');
    // const [subscription, setSubscription] = React.useState<boolean>(false);

    /* Availability Check */
    const [zipcode, setZipCode] = React.useState<string>(String(cCustomerZipCode));
    const [availabilityCheck, setAvailabilityCheck] = React.useState<string>(String(cCustomerAvailabilityCheck));
    const [availabilityCheckStatus, setAvailabilityCheckStatus] = React.useState<string>(String(cCustomerResponseStatus));

    var vIndiaPincode: IIndiaPincodeObject = {
        pincode: []
    };

    const notifySubmitForm = (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();

        const itemId = product.result?.ItemId;
        console.log('SIMPLE PRODUCT ITEM ID>>>', itemId);

        if (email === '') {
            setValidEmail('sff_error-message');
            return;
        } else {
            setValidEmail('');
        }

        if (phone_no === '' || phone_no.length !== 10) {
            setValidPhone('sff_error-message');
            return;
        } else {
            setValidPhone('');
        }

        const cNotifyMeRetailURL = `${cRetailURL}Commerce/TCPLCreateNotifyMeSubscription?api-version=7.3`;

        var data = JSON.stringify({
            custAccount: cCustomerAccount,
            email: email,
            itemid: itemId,
            phone: phone_no
        });

        var xhr = new XMLHttpRequest();
        xhr.withCredentials = true;

        xhr.addEventListener('readystatechange', function() {
            try {
                if (this.readyState === 4) {
                    if (xhr.status === 200) {
                        const result = JSON.parse(xhr.responseText);
                        if (result.value === 1) {
                            setStatusMessage('true');
                            setPhoneNo('');
                        } else {
                            setStatusMessage('false');
                        }
                        setTimeout(function() {
                            setOpen(false);
                            setStatusMessage('');
                        }, 3000);
                        console.log('STATUS>>>>', xhr.status);
                        console.log('RESPONSE>>>>', xhr.responseText);
                    } else {
                        setStatusMessage('false');
                        setTimeout(function() {
                            setOpen(false);
                            setStatusMessage('');
                        }, 3000);
                        console.log('STATUS>>>>', xhr.status);
                        console.log('RESPONSE>>>>', xhr.responseText);
                    }
                    console.log(this.responseText);
                }
            } catch (Exception) {
                console.log('NotifyMe Exception>>>>', Exception);
            }
        });

        xhr.open('POST', cNotifyMeRetailURL);
        xhr.setRequestHeader('User-Agent', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0');
        xhr.setRequestHeader('OUN', cRetailOUN);
        xhr.setRequestHeader('Content-Type', 'application/json');

        xhr.send(data);
    };

    const availabilityCheckSubmitForm = (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();

        if (zipcode === '' || zipcode.length !== 6) {
            return;
        }

        const cAvailabilityCheckRetailURL = `${cRetailURL}Commerce/TCPLGetDeliveryAvailablility?api-version=7.3`;

        var data = JSON.stringify({
            zipCode: zipcode
        });

        var xhr = new XMLHttpRequest();
        xhr.withCredentials = true;

        xhr.addEventListener('readystatechange', function() {
            try {
                if (this.readyState === 4) {
                    setAvailabilityCheck('false');
                    props.context.request.cookies.set('_msdyn365___zipcode_', zipcode);
                    vIndiaPincode.pincode = IndiaPincode.pincode;
                    var vVerified = vIndiaPincode.pincode.filter(pincode => pincode.p == parseInt(zipcode));

                    if (vVerified.length > 0) {
                        props.context.request.cookies.set('_msdyn365___state_', vVerified[0].s);
                    } else {
                        props.context.request.cookies.set('_msdyn365___state_', '');
                    }

                    props.context.request.cookies.set('_msdyn365___zipcode_check', 'false');
                    if (xhr.status === 200) {
                        var vAvailabilityCheckResult = JSON.parse(xhr.responseText);
                        if (vAvailabilityCheckResult.value === true) {
                            setAvailabilityCheckStatus('');
                            props.context.request.cookies.set('_msdyn365___zipcode_res_status', '');
                        } else {
                            setAvailabilityCheckStatus('error-msg');
                            props.context.request.cookies.set('_msdyn365___zipcode_res_status', 'error-msg');
                        }
                    } else {
                        setAvailabilityCheckStatus('error-msg');
                        props.context.request.cookies.set('_msdyn365___zipcode_res_status', 'error-msg');
                        console.log('STATUS>>>>', xhr.status);
                        console.log('RESPONSE>>>>', xhr.responseText);
                    }
                    window.location.reload();
                }
            } catch (Exception) {
                console.log('Pincode Exception>>>>', Exception);
            }
        });

        xhr.open('POST', cAvailabilityCheckRetailURL);
        xhr.setRequestHeader('OUN', cRetailOUN);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.setRequestHeader('Accept', 'application/json');

        xhr.send(data);
    };

    const getCircularReplacer = () => {
        const seen = new WeakSet();

        return (_key: any, value: object | null) => {
            if (typeof value === 'object' && value !== null) {
                if (seen.has(value)) {
                    return;
                }
                seen.add(value);
            }
            return value;
        };
    };

    var productStock = JSON.stringify(inventoryLabel, getCircularReplacer());

    var vProductStock: IProductStock = {
        inventoryLabel: {
            type: '',
            key: null,
            ref: null,
            props: {
                className: '',
                children: {
                    type: '',
                    key: null,
                    ref: null,
                    props: {
                        className: '',
                        children: ''
                    },
                    _owner: null
                }
            },
            _owner: null
        }
    };

    vProductStock.inventoryLabel = productStock ? JSON.parse(productStock) : [];
    return (
        <Module {...ModuleProps}>
            <Node {...MediaGalleryContainerProps}>
                {props.mediaGallery}
                <div className='sff_product-description-title'>{description}</div>
            </Node>

            <Node {...ProductInfoContainerProps}>
                {title}
                {price}
                {unitOfMeasure}
                {props.bulkPurchaseLink}
                {_renderTextBlock(props.slots.textBlocks)}
                {rating}
                <div className='row'>
                    <div className='col-12'>
                        {availabilityCheck === 'false' && (
                            <div className='sff_availability-check-link'>
                                <div className={`sff_availability-check-msg ${availabilityCheckStatus}`}>
                                    {availabilityCheckStatus === ''
                                        ? 'Woohoo! This goodness ships your way.'
                                        : 'Please check with correct pincode'}
                                    <span onClick={() => setAvailabilityCheck('true')}>Check another pincode</span>
                                </div>
                            </div>
                        )}
                        {availabilityCheck === 'true' && (
                            <div className='sff_modal'>
                                <div className='sff_content'>
                                    <form onSubmit={availabilityCheckSubmitForm}>
                                        <div className='sff_msv-title-availability-check'>Check Availability In Your Area:</div>
                                        <div className='sff_msv-input-availability-check'>
                                            <input
                                                type='number'
                                                name='zip_code'
                                                value={zipcode}
                                                onChange={e => setZipCode(e.target.value)}
                                                min={'100000'}
                                                max={'999999'}
                                                placeholder='Enter Your Pincode'
                                            />
                                        </div>
                                        <div className='sff_msv-button-availability-check'>
                                            <button>Check</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
                {configure && _renderConfigure(configure)}
                {keyInPrice && _renderKeyInPrice(keyInPrice)}
                <div className='row'>
                    <div className='col-12 col-md-6 col-sm-12 col-lg-6'>
                        {quantity &&
                            _renderQuantity(quantity, callbacks, props, state, resources, quantityLimitsMessages, max, telemetryContent)}
                    </div>
                    {vProductStock.inventoryLabel?.props?.children?.props?.children !== 'Available' && (
                        <div className='col-12 col-md-6 col-sm-12 col-lg-6'>
                            {/* <div className='sff_msv-soldout-container'>
                                <button>
                                    <span>Sold Out</span>
                                </button>
                            </div> */}
                            <div className='sff_msv-notify-me-container'>
                                <button className='sff_msv-notify-me-button' onClick={() => setOpen(o => !o)}>
                                    Notify Me When Available
                                </button>
                            </div>
                        </div>
                    )}
                </div>
                <div className='sff_mob-product-description-title'>{description}</div>
                <Popup open={open} closeOnDocumentClick onClose={closeModal}>
                    <div className='sff_modal sff_notify-me-modal'>
                        <div className='sff_header'>
                            <p className='sff_header-title'>Notify me when available</p>
                            <span className='sff_header-close' onClick={closeModal}>
                                &times;
                            </span>
                        </div>
                        <div className='sff_content'>
                            <p>Subscribe to this product to receive a notification once it becomes available.</p>
                            <form onSubmit={notifySubmitForm}>
                                <div className='sff_msv-row-email'>
                                    <input
                                        type='email'
                                        name='email'
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}
                                        placeholder='Email'
                                        className={`${validEmail}`}
                                    />
                                </div>
                                <div className='sff_msv-row-phone'>
                                    <select name='dial_code'>
                                        <option value='+91'>India (+91)</option>
                                    </select>
                                    <input
                                        type='text'
                                        name='phone_no'
                                        value={phone_no}
                                        onChange={e => setPhoneNo(e.target.value)}
                                        placeholder='Phone No'
                                        className={`sff_has-margin-left ${validPhone}`}
                                    />
                                </div>
                                {/* <div className='sff_msv-row-checkbox'>
                                    <label htmlFor='subscription' className='sff_checkbox-label'>
                                        <input
                                            id='subscription'
                                            type='checkbox'
                                            name='subscription'
                                            value={`${subscription}`}
                                            onChange={e => setSubscription(e.target.checked)}
                                        />
                                        <span>Subscribe me our mailing list</span>
                                    </label>
                                </div> */}
                                {statusMessage !== '' && (
                                    <div className='sff_alert-message'>
                                        {statusMessage === 'true' && (
                                            <div className='alert alert-success'>Your request has been submitted</div>
                                        )}
                                        {statusMessage === 'false' && (
                                            <div className='alert alert-danger'>Your request has not been submitted</div>
                                        )}
                                    </div>
                                )}
                                <button className='button' type='submit'>
                                    Notify me when available
                                </button>
                            </form>
                        </div>
                        <div className='sff_footer'></div>
                    </div>
                </Popup>
                {/* {inventoryLabel} */}
                {availabilityCheck === 'false' && availabilityCheckStatus !== ''
                    ? _renderWishlistAndActions(addToOrderTemplate, addToWishlist)
                    : _renderCartAndActions(addToCart, addToOrderTemplate, addToWishlist)}
                {findInStore && _renderFindInStore(findInStore)}
                {_renderSocialShare(props.slots && props.slots.socialShare)}
                {shopSimilarLook && _renderShopSimilarItem(shopSimilarLook)}
                {shopSimilarDescription && _renderShopSimilarItem(shopSimilarDescription)}
            </Node>
        </Module>
    );
};

const _renderTextBlock = (textBlocks: React.ReactNode[]): JSX.Element | undefined => {
    if (!textBlocks || textBlocks.length === 0) {
        return undefined;
    }

    return <>{textBlocks[0]}</>;
};

const _renderSocialShare = (socialShare: React.ReactNode[]): JSX.Element | undefined => {
    if (!socialShare || socialShare.length === 0) {
        return undefined;
    }

    return <>{socialShare[0]}</>;
};

const _renderCartAndActions = (
    addToCart?: IBuyboxAddToCartViewProps,
    addToOrderTemplate?: IBuyboxAddToOrderTemplateViewProps,
    addToWishlist?: IBuyboxAddToWishlistViewProps
): JSX.Element | undefined => {
    if (!addToCart && !addToWishlist) {
        return undefined;
    }

    return (
        <div className='product-add-to-cart'>
            {addToCart && addToCart.errorBlock}
            {addToOrderTemplate && addToOrderTemplate.errorBlock}
            {addToWishlist && addToWishlist.errorBlock}
            <div className='buttons'>
                {addToCart && addToCart.button}
                {/* {addToOrderTemplate && addToOrderTemplate.button} */}
                {/* {addToWishlist && addToWishlist.button} */}
            </div>
        </div>
    );
};

const _renderWishlistAndActions = (
    addToOrderTemplate?: IBuyboxAddToOrderTemplateViewProps,
    addToWishlist?: IBuyboxAddToWishlistViewProps
): JSX.Element | undefined => {
    if (!addToWishlist) {
        return undefined;
    }

    return (
        <div className='product-add-to-cart'>
            {addToOrderTemplate && addToOrderTemplate.errorBlock}
            {addToWishlist && addToWishlist.errorBlock}
            <div className='buttons'>
                <button className='msc-add-to-cart'>Add to Cart</button>
                {/* {addToOrderTemplate && addToOrderTemplate.button} */}
                {/* {addToWishlist && addToWishlist.button} */}
            </div>
        </div>
    );
};

const _renderConfigure = (configure: IBuyboxProductConfigureViewProps): JSX.Element => {
    const { ContainerProps, dropdowns } = configure;

    return <Node {...ContainerProps}>{dropdowns.map(_renderConfigureDropdown)}</Node>;
};

const _renderConfigureDropdown = (dropdown: IBuyboxProductConfigureDropdownViewProps): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, errors, select } = dropdown;

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>
                {heading}
                {errors}
            </Node>
            {select}
        </Node>
    );
};

const _renderFindInStore = (findInStore: IBuyboxFindInStoreViewProps): JSX.Element => {
    const { ContainerProps, storeSelector, heading, description, errors, button, modal, productPickupOptionList } = findInStore;

    return (
        <Node {...ContainerProps}>
            {storeSelector}
            {heading}
            {productPickupOptionList}
            {description}
            {errors}
            {button}
            {modal}
        </Node>
    );
};

/**
 * On Change function.
 * @param callbacks -Callbacks.
 * @returns Update quantity.
 */
const onChangeHandler = (callbacks: IBuyboxCallbacks) => (newValue: number): boolean => {
    if (callbacks.updateQuantity) {
        return callbacks.updateQuantity(newValue);
    }
    return true;
};

const _renderQuantity = (
    quantityComponent: IBuyboxProductQuantityViewProps,
    callbacks: IBuyboxCallbacks,
    props: IBuyboxProps<IBuyboxData>,
    state: IBuyboxState,
    extentionResources: IBuyboxExtentionResources,
    quantityLimitsMessages: React.ReactNode,
    max: number | undefined,
    telemetryContent?: ITelemetryContent
): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, errors } = quantityComponent;

    const { resources } = props;

    const { quantity } = state;

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>
                {heading}
                {errors}
            </Node>

            <IncrementalQuantity
                id='ms-buybox__product-quantity-input'
                max={max}
                currentCount={quantity}
                onChange={onChangeHandler(callbacks)}
                inputQuantityAriaLabel={resources.inputQuantityAriaLabel}
                decrementButtonAriaLabel={extentionResources.decrementButtonAriaLabel}
                incrementButtonAriaLabel={extentionResources.incrementButtonAriaLabel}
                minQuantityText={extentionResources.minQuantityText}
                maxQuantityText={extentionResources.maxQuantityText}
                telemetryContent={telemetryContent}
            />
            {quantityLimitsMessages}
        </Node>
    );
};

const _renderKeyInPrice = (keyInPrice: IBuyboxKeyInPriceViewProps): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, input } = keyInPrice;

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>{heading}</Node>
            {input}
        </Node>
    );
};

const _renderShopSimilarItem = (shopSimilarItem: IBuyboxShopSimilarLookViewProps): JSX.Element => {
    const { ContainerProps, errors, input } = shopSimilarItem;

    return (
        <Node {...ContainerProps}>
            {errors}
            {input}
        </Node>
    );
};

export default BuyboxView;
