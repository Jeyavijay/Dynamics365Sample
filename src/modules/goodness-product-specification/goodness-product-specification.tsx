/*--------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * See License.txt in the project root for license information.
 *--------------------------------------------------------------*/

/* eslint-disable no-duplicate-imports */
import * as Msdyn365 from '@msdyn365-commerce/core';
import { AttributeValue } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { Drawer, IModuleProps, INodeProps, Module } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { reaction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import { AttributesForSelectedVariantInput, getAttributesForSelectedVariant } from '@msdyn365-commerce-modules/product-specification';
import { ProductSpecificationTableRow } from './components/goodness-product-specification-table-stucture';
import { IGoodnessProductSpecificationData } from './goodness-product-specification.data';
import { displayStyle, IGoodnessProductSpecificationProps } from './goodness-product-specification.props.autogenerated';

/**
 * Maintain Drawer State.
 */
export interface IProductSpecificationState {
    isDrawerOpen: boolean;
    drawerListId: number | undefined;
}

/**
 * Product specification view props.
 */
export interface IProductSpecificationViewProps extends IGoodnessProductSpecificationProps<{}> {
    ProductSpecification: IModuleProps;
    ProductSpecificationTableProps: INodeProps;
    ProductSpecificationTableBodyProps: INodeProps;
    productSpecificationResult?: (JSX.Element | null)[];
    title?: React.ReactNode;
    isAccrodion?: boolean;
    handleText?(event: Msdyn365.ContentEditableEvent): void;
}

/**
 * Check for display style either accordion or table.
 */
export interface IProductSpecificationExtentedProps extends IGoodnessProductSpecificationProps<IGoodnessProductSpecificationData> {
    displayStyle?: displayStyle;
}

/**
 *
 * ProductSpecification component.
 * @extends {React.Component<IGoodnessProductSpecificationProps<IGoodnessProductSpecificationData>>}
 */
@observer
class ProductSpecification extends React.Component<IProductSpecificationExtentedProps, IProductSpecificationState> {
    public constructor(props: IProductSpecificationExtentedProps) {
        super(props);
        this.state = {
            isDrawerOpen: false,
            drawerListId: undefined
        };
    }

    public async componentDidMount(): Promise<void> {
        const { context, data, telemetry } = this.props;
        const catalogId = Msdyn365.getCatalogId(this.props.context.request);
        reaction(
            () => (data.product.result ? data.product.result.RecordId : null),
            () => {
                if (context && data.product.result) {
                    const actionInput = new AttributesForSelectedVariantInput(
                        data.product.result.RecordId,

                        +context.actionContext.requestContext.apiSettings.channelId,
                        data.product.result,
                        catalogId
                    );

                    getAttributesForSelectedVariant(actionInput, this.props.context.actionContext).catch((error: Error) => {
                        telemetry.error(error.message);
                        telemetry.debug('Unable to update attributes for Product');
                        telemetry.error(error.message);
                    });
                }
            }
        );
    }

    public shouldComponentUpdate(nextProps: IProductSpecificationExtentedProps, nextState: IProductSpecificationState): boolean {
        if (this.state === nextState && this.props.data === nextProps.data) {
            return false;
        }
        return true;
    }

    public render(): JSX.Element | null {
        let data: IGoodnessProductSpecificationData;
        try {
            data = this.props.data;
        } catch (error) {
            this.props.telemetry.error(`Something went wrong ------${error}`);
            return <div>{error}</div>;
        }

        if (!data.productSpecificationData.result || data.productSpecificationData.result.length <= 0) {
            this.props.telemetry.error('Product specification content is empty, module wont render.');
            return null;
        }

        const { heading, className } = this.props.config;
        const { productSpecificationData } = this.props.data;
        const isAccrodion = this.props.config.displayStyle === displayStyle.accordion;
        const viewProps = {
            ...this.props,
            handleText: this.handleHeadingChange,
            ProductSpecification: {
                moduleProps: this.props,
                className: classnames('ms-product-specification', className)
            },
            ProductSpecificationTableProps: isAccrodion
                ? {
                      moduleProps: this.props,
                      className: classnames('ms-product-specification__accordion', className)
                  }
                : {
                      className: classnames('ms-product-specification__table table-striped table-bordered'),
                      tag: 'table'
                  },
            isAccrodion,
            ProductSpecificationTableBodyProps: isAccrodion
                ? {}
                : {
                      className: '',
                      tag: 'tbody'
                  },
            title: heading?.text && (
                <Msdyn365.Text
                    className='ms-product-specification__heading'
                    tag={heading.tag ?? 'h2'}
                    text={heading.text}
                    editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}
                />
            ),

            productSpecificationResult: isAccrodion
                ? productSpecificationData && this._createDrawerBody(data)
                : productSpecificationData && this._createTableBody(data)
        } as IProductSpecificationViewProps;

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    /**
     * Handle Heading Text Change.
     * @param event - Current event.
     */
    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent): void => {
        this.props.config.heading!.text = event.target.value;
    };

    private _createTableBody(content: IGoodnessProductSpecificationData): (JSX.Element | null)[] {
        return content.productSpecificationData.result!.map((product, index) => {
            const cellData: JSX.Element | null = this._renderProductCell(product);

            if (!cellData) {
                return null;
            }

            return (
                <ProductSpecificationTableRow
                    className='ms-product-specification__table-row'
                    key={index}
                    productName={product.Name}
                    cellData={cellData}
                />
            );
        });
    }

    private _createDrawerBody(content: IGoodnessProductSpecificationData): (JSX.Element | null)[] {
        const accordionItemContainer: IModuleProps = {
            moduleProps: this.props,
            className: 'ms-product-specification-title'
        };
        return content.productSpecificationData.result!.map(product => {
            const cellData: JSX.Element | null = this._renderProductCell(product);
            if (!cellData) {
                return null;
            }
            return (
                <Module {...accordionItemContainer} key={product.RecordId}>
                    <Drawer
                        key={product.RecordId}
                        collapseProps={{
                            timeout: 0,
                            isOpen: this.state.isDrawerOpen && this.state.drawerListId === product.RecordId
                        }}
                        className='ms-product-specification__drawer'
                        openGlyph='ms-product-specification__drawer-open'
                        closeGlyph='ms-product-specification__drawer-close'
                        glyphPlacement='end'
                        toggleButtonText={product.Name ?? ''}
                        onToggle={this._toggle(product.RecordId)}
                    >
                        <div className='ms-product-details'>{cellData}</div>
                    </Drawer>
                </Module>
            );
        });
    }

    private readonly _toggle = (drawerListId: number | undefined) => (): void => {
        if (this.state.drawerListId !== drawerListId) {
            this.setState({ drawerListId, isDrawerOpen: true });
        } else {
            this.setState({ drawerListId: undefined, isDrawerOpen: false });
        }
    };

    private _renderProductCell(product: AttributeValue): JSX.Element | null {
        switch (product.DataTypeValue) {
            case 0: // None
                // Return span here instead of null so the row still shows
                return <span />;
            case 1: // Currency
                return this._renderCurrencyCell(product);
            case 2: // DateTime
                return this._renderDateTimeCell(product);
            case 3: // Decimal
                return this._renderDecimalCell(product);
            case 4: // Integer
                return this._renderIntegerCell(product);
            case 5: // Text
                return this._renderTextCell(product);
            case 6: // TrueFalse
                return this._renderTrueFalseCell(product);
            case 40: // Video
                this.props.telemetry.warning('Got video specification type, not supported yet so skipping line');
                return null;
            case 41: // Image
                this.props.telemetry.warning('Got image specification type, not supported yet so skipping line');
                return null;
            default:
                this.props.telemetry.warning(`Got unknown specification type ${product.DataTypeValue} so skipping line`);
                return null;
        }
    }

    private _renderCurrencyCell(product: AttributeValue): JSX.Element | null {
        if (product.CurrencyValue !== null && product.CurrencyValue !== undefined) {
            return (
                <span>
                    {product.CurrencyCode}
                    {product.CurrencyValue}
                </span>
            );
        }

        return null;
    }

    private _renderDateTimeCell(product: AttributeValue): JSX.Element | null {
        if (product.DateTimeOffsetValue?.toUTCString) {
            return <span>{product.DateTimeOffsetValue.toUTCString()}</span>;
        }

        return null;
    }

    private _renderIntegerCell(product: AttributeValue): JSX.Element | null {
        if (product.IntegerValue !== null && product.IntegerValue !== undefined) {
            return <span>{product.IntegerValue}</span>;
        }

        return null;
    }

    private _renderDecimalCell(product: AttributeValue): JSX.Element | null {
        if (product.FloatValue !== null && product.FloatValue !== undefined) {
            return <span>{product.FloatValue}</span>;
        }

        return null;
    }

    private _renderTextCell(product: AttributeValue): JSX.Element | null {
        if (product.TextValue !== null && product.TextValue !== undefined) {
            return <span dangerouslySetInnerHTML={Msdyn365.getRichTextHtml(product.TextValue)} />;
        }

        return null;
    }

    private _renderTrueFalseCell(product: AttributeValue): JSX.Element | null {
        // TODO 20369885 setting to default value is needed to work around a platform bug where
        // config string value does not get its default value.
        if (product.BooleanValue) {
            return <span>{this.props.resources.trueValueText ? this.props.resources.trueValueText : 'Yes'}</span>;
        }
        return <span>{this.props.resources.falseValueText ? this.props.resources.falseValueText : 'No'}</span>;
    }
}

export default ProductSpecification;
